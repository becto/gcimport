#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##
# gcimport
# author: notizblock <nblock@archlinux.us>
# license: GPLv3
'''Convert various banking statements to csv files that can be easily parsed with GnuCash.'''

import codecs
import argparse
import os
import re
from decimal import Decimal
from datetime import datetime
from collections import defaultdict

def __check_infile(infile):
    '''Check if infile exists and is readable.'''
    if not os.access(infile, os.R_OK):
        raise argparse.ArgumentTypeError(
                "'{0}' does not exist or is not readable.".format(infile))
    return infile

def __decimal_to_gc_amount(value):
    '''Convert the given value to a tuple (income, expense) based on its sign.

    Each element is converted to a string of the following format: 'xxx,yy'.'''
    __convert = lambda x: '{:.2f}'.format(x).replace('.', ',')
    if value <= 0:
        return (__convert(0), __convert(abs(value)))
    else:
        return (__convert(value), __convert(0))

def detect_input_format(infile):
    '''Detect input format and select the function to parse the file.
    Raise a ValueError on unknown files.'''
    if infile.endswith('Herunterladen.csv'):
        return convert_paypal
    elif 'EASYBANK_Umsatzliste' in infile:
        return convert_easybank
    elif 'umsaetze-girokonto_' in infile:
        return convert_livebank
    elif 'elbi_umsaetze' in infile:
        return convert_elba
    else:
        raise ValueError('Could not detect input format.')

def read_infile(infile, encoding='utf-8'):
    '''Read from infile and return content as list of lines'''
    with codecs.open(infile, 'r', encoding=encoding) as f:
        return f.readlines()

def write_csv(outfile, data_list):
    '''Write data to csv file.'''
    #[{
    # 'number': 'entry number'
    # 'date': datetime object,
    # 'description': 'description',
    # 'income': '700,00',
    # 'expense': '0,00'
    #}, ...]
    with open(outfile, 'w') as f:
        for item in data_list:
            out_str = '"{}","{}","{}","{}"\n'.format(
                    item['number'].encode('utf-8'),
                    item['date'].strftime(u'%Y.%m.%d'),
                    item['description'].encode('utf-8'),
                    item['income'].encode('utf-8'),
                    item['expense'].encode('utf-8')
                    )
            f.write(out_str)

def cleanup_multiple_whitespaces(uncleaned_string):
    '''Clean a string from multiple consecutive white spaces.'''
    return ' '.join(uncleaned_string.split())

def convert_elba(infile):
    '''Convert ELBA csv to internal format and return it.'''
    data_list = []
    for line in read_infile(infile, encoding='cp1252'):
        entry = defaultdict(unicode)
        parts = line.strip().split(';')[:-1]

        # parse entry
        entry['date'] = datetime.strptime(parts[0], '%d.%m.%Y')
        entry['description'] = cleanup_multiple_whitespaces(parts[1][1:-1])
        amount = Decimal(parts[3].replace(',', '.'))
        entry['income'], entry['expense'] = __decimal_to_gc_amount(amount)

        # save entry
        data_list.append(entry)
    return data_list

def convert_easybank(infile):
    '''Convert easybank csv to internal format and return it.'''
    data_list = []
    reg_description = re.compile(r'[A-Z]{2}/[0-9]{9}')
    reg_iban = re.compile(r'([A-Z]{6}[A-Z0-9]{2}[^\s]*)\s([A-Z]{2}[0-9]{10,34}\s)(.*)')
    reg_legacy = re.compile(r'(.*)([0-9]{5,})\s([0-9]{6,})(.*)')

    def is_creditcard(description):
        '''Try to detect if input is from a creditcard or a giro account.'''
        if '|' in description:
            return True
        return False

    def extract_description_from_giro(description):
        '''Cleanup description from a giro account.'''
        # extract iban/bic, account number, ...
        extracted_data = {}
        done = False
        tmp = [x.strip() for x in reg_description.split(description)]
        if tmp[1]:
            # extract iban, bic and text
            iban_bic = reg_iban.search(tmp[1])
            if iban_bic:
                extracted_data['nr'] = iban_bic.group(2).strip()
                extracted_data['bank'] = iban_bic.group(1)
                extracted_data['vendor'] = iban_bic.group(3)
                done = True
            # bank number
            if not done:
                account_number = reg_legacy.search(tmp[1])
                if account_number:
                    extracted_data['bank'] = account_number.group(2)
                    extracted_data['nr'] = account_number.group(3)
                    if account_number.group(1):
                        extracted_data['vendor'] = account_number.group(1).strip()
                    else:
                        extracted_data['vendor'] = account_number.group(4).strip()
                    done = True

        # build up description
        if not tmp[1]:
            return u'{0}'.format(tmp[0])
        elif not done:
            return u'{0}: {1}'.format(tmp[0], tmp[1])
        elif len(extracted_data) == 3:
            return u'{0}: {1} ({2} {3})'.format(
                    tmp[0], extracted_data['vendor'],
                    extracted_data['nr'], extracted_data['bank'])
        else:
            return None

    def extract_description_from_creditcard(description):
        '''Cleanup description from a creditcard account'''
        tmp = description.split('|')
        if len(tmp) == 2:
            return u'{0} ({1})'.format(tmp[0], tmp[1])
        elif len(tmp) == 3:
            return u'{0} - {1} ({2})'.format(tmp[0], tmp[1], tmp[2])

    def extract_number(description):
        '''Try to extract the booking number.'''
        result = u''
        mo = reg_description.search(description)
        if mo:
            result = unicode(int(mo.group(0).split('/')[1]))
        return result

    for line in read_infile(infile, encoding='cp1252'):
        entry = defaultdict(unicode)
        parts = line.strip().split(';')

        # parse entry
        entry['date'] = datetime.strptime(parts[2], '%d.%m.%Y')

        # parse description and number (giro only).
        if is_creditcard(parts[1]):
            entry['description'] = extract_description_from_creditcard(parts[1])
        else:
            entry['description'] = extract_description_from_giro(parts[1])
            entry['number'] = extract_number(parts[1])

        # description
        if not entry['description']:
            print('Could not cleanup description, using default.')
            entry['description'] = parts[1]
        entry['description'] = cleanup_multiple_whitespaces(entry['description'])

        # amount
        amount = parts[4].replace('.', '')
        amount = Decimal(amount.replace(',','.'))
        entry['income'], entry['expense'] = __decimal_to_gc_amount(amount)

        # save entry
        data_list.append(entry)
    return data_list

def convert_livebank(infile):
    '''Convert livebank csv to internal format and return it.'''
    data_list = []
    for line in read_infile(infile, encoding='iso-8859-1')[1:]:
        entry = defaultdict(unicode)
        parts = line.strip().split(';')

        # skip the enire record if there is no amount to account
        if parts[7] == "0,00":
            continue

        # parse entry
        entry['date'] = datetime.strptime(parts[3], '%Y-%m-%d')
        entry['description'] = ', '.join(parts[8:]).replace('"', '')
        amount = parts[7].replace('.','')
        amount = Decimal(amount.replace(',','.'))
        entry['income'], entry['expense'] = __decimal_to_gc_amount(amount)

        # save entry
        data_list.append(entry)
    return data_list

def convert_paypal(infile):
    '''Convert paypal csv files to internal format and return it.'''
    data_list = []
    for line in read_infile(infile, encoding='iso-8859-1')[1:]: # skip first line
        entry = defaultdict(unicode)
        parts = line.strip().split('"')
        parts = [part for part in parts if part]
        parts = [part for part in parts if len(part) != 1]

        # parse entry
        entry['date'] = datetime.strptime(parts[0], '%d.%m.%Y')
        entry['description'] = parts[3]
        amount = Decimal(parts[7].replace(',', '.'))
        entry['income'], entry['expense'] = __decimal_to_gc_amount(amount)

        # save entry
        data_list.append(entry)
    return data_list

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='The input file to convert.', type=__check_infile)
    parser.add_argument('outfile', help='The GnuCash compatible csv file to write.', type=str)
    args = parser.parse_args()

    try:
        func = detect_input_format(args.infile)
        data = func(args.infile)
        write_csv(args.outfile, data)
    except ValueError as e:
        print(e)
