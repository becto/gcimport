#!/usr/bin/env python2
'''convert multiple input files (csv, txt) to csv files that can be parsed with gnucash'''

import codecs
import argparse
from decimal import Decimal

def detect_input_format(infile):
    '''detect input format and return the function to parse the file or raise a ValueError'''
    with open(infile, 'r') as fp:
        if(len(fp.readline().split(';'))) == 7:
            return convert_elba
        else:
            raise ValueError('Could not detect input format.')

def write_csv(outfile, data_list):
    '''write data to csv file'''
    #[ {'date':'dd.mm.yyyy', 'description':'description', 'income':'700,00', 'expense': '0,00'}, ...]
    with open(outfile, 'w') as f:
        for item in data_list:
            out_str = '{};{};{};{}\n'.format(
                    item['date'].encode('utf-8'),
                    item['description'].encode('utf-8'),
                    item['income'].encode('utf-8'),
                    item['expense'].encode('utf-8')
                    )
            f.write(out_str)

def convert_elba(infile):
    '''convert ELBA csv to internal mini format and return it'''
    __to_elba_amount = lambda x: '{:.2f}'.format(x).replace('.', ',')
    keys = (u'date', u'description', u'amount')
    data_list = []
    with codecs.open(infile, 'r', encoding='cp1252') as f:
        for line in f:
            parts = line.strip().split(';')[:-1]
            #delete unnecessary values
            for idx in (5, 4, 2):
                del(parts[idx])
            #convert string to decimal
            parts[2] = Decimal(parts[2].replace(',','.'))
            data_list.append(dict(zip(keys, parts)))

    #add income and expenses keys according to key 'amount'
    for item in data_list:
        if item['amount'] <= 0:
            item['expense'] = __to_elba_amount(abs(item['amount']))
            item['income'] = __to_elba_amount(0)
        else:
            item['income'] = __to_elba_amount(item['amount'])
            item['expense'] = __to_elba_amount(0)
        del(item['amount'])

    return data_list


if __name__ == '__main__':
    '''main entry point with a cli parser'''
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='the input file to convert', type=str)
    parser.add_argument('outfile', help='the gnucash compatible csv file to write', type=str)
    args = parser.parse_args()

    try:
        func = detect_input_format(args.infile)
        data_list = func(args.infile)
        write_csv(args.outfile, data_list)
    except ValueError as e:
        (e)
